#定义父logger的日志服务
log4j.rootLogger = ERROR,logfile,stdout
log4j.addivity.org.apache=true

####################
#定义子looger的日志服务，默认子logger继承父logger，子logger一般为具体的业务日志
#parameter : addivity
            #false : 不继承父logger，子logger只写自己的log文件，不写入父log文件
            #true  : 继承父logger，子logger即写自己的log文件，也写父log文件
####################
#定义子looger的日志服务，默认子logger继承父logger，子logger一般为具体的业务日志
log4j.logger.businessLog=INFO,business
log4j.addivity.org.businessLog=false


####################
#console Appender -> stdout
# 生产上建议stdout注释，因为没指定具体哪个配置的logger，会默认以rootLogger配置的的第一个stdout的配置的日志级别和rootLogger的日志级别取最大值
####################
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Thredhold = INFO
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern =[%p] %d{yyyy-MM-dd HH:mm:ss,SSS} [%c{1}.%M][line:%L] %m%n

####################
# File Appender  -> logfile
####################
log4j.appender.logfile = org.apache.log4j.DailyRollingFileAppender
log4j.appender.logfile.File = ./logs/TestLog4j.log
log4j.appender.logfile.Append = true
log4j.appender.logfile.Threshold = ERROR
log4j.appender.logfile.layout = org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern = [%p] %-d{yyyy-MM-dd HH:mm:ss,SSS} [%c{1}.%M][line:%L] %m%n


####################
# business Appender  -> business
####################
log4j.appender.business = org.apache.log4j.DailyRollingFileAppender
log4j.appender.business.File = ./logs/BusiLog/TestLog4j.log
log4j.appender.business.Append = true
log4j.appender.business.Threshold = INFO
log4j.appender.business.layout = org.apache.log4j.PatternLayout
log4j.appender.business.layout.ConversionPattern = [%p] %-d{yyyy-MM-dd HH:mm:ss,SSS} [%c{1}.%M][line:%L] %m%n